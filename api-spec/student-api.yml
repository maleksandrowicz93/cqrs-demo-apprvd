openapi: 3.0.3
info:
  title: cqrs demo - OpenAPI 3.0
  description: This is a cqrs demo application API based on the OpenAPI 3.0 specification.
  termsOfService: https://github.com/maleksandrowicz93/cqrs-demo-apprvd
  contact:
    name: Contact the Developer
    url: https://www.linkedin.com/in/mateusz-aleksandrowicz/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about swagger
  url: http://swagger.io
servers:
  - url: '{protocol}://{hostname}:{port}/cqrs-demo'
    variables:
      protocol:
        enum:
          - 'http'
          - 'https'
        default: 'http'
      hostname:
        default: localhost
      port:
        default: '8000'
tags:
  - name: student
    description: API related to student account management
paths:
  /student:
    post:
      tags:
        - student
      summary: Add student
      description: Creates a new student's account
      operationId: addStudent
      requestBody:
        description: data of student to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveStudentRequest'
      responses:
        '200':
          description: Added student's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    get:
      tags:
        - student
      summary: Get all students
      description: Retrieves all students' accounts data
      operationId: findAllStudents
      parameters:
        - name: page
          in: query
          description: number of result's page
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 0
        - name: size
          in: query
          description: sie of result's page
          required: true
          schema:
            type: integer
            format: int32
            minimum: 5
            default: 10
            example: 10
      responses:
        '200':
          description: List of all students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentIdentificationList'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /student/{id}:
    get:
      tags:
        - student
      summary: Get student
      description: Retrieves existing student's data by his id
      operationId: findStudent
      parameters:
        - name: id
          in: path
          description: id of a student
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Found student's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    put:
      tags:
        - student
      summary: Edit student
      description: Edits student's account data
      operationId: editStudent
      parameters:
        - name: id
          in: path
          description: id of a student
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        description: new student's account data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveStudentRequest'
      responses:
        '200':
          description: Added student's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - student
      summary: Delete student
      description: Deletes a student's account by his id
      operationId: deleteStudent
      parameters:
        - name: id
          in: path
          description: id of a student
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Student's account data edit status
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /student/{id}/password:
    put:
      tags:
        - student
      summary: Update password
      description: Updates a student's password
      operationId: updatePassword
      parameters:
        - name: id
          in: path
          description: id of a student
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        description: new password
        required: true
        content:
          application/json:
            schema:
              description: New password of a student
              type: string
              format: password
              example: password123
      responses:
        '200':
          description: Student's password change status
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
components:
  responses:
    400BadRequest:
      description: Bad Request error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    404NotFound:
      description: Not Found error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    500InternalServerError:
      description: Unknown error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    StudentIdentificationList:
      description: List of students
      type: array
      items:
        $ref: '#/components/schemas/StudentIdentification'
    StudentIdentification:
      description: Model representing a student account data
      type: object
      required:
        - id
        - email
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        email:
          type: string
          example: john.paul@gmail.com
    UUID:
      description: uuid for schemas
      type: string
      format: uuid
      example: 78999bb1-bddb-48d9-966f-927e53a21657
    StudentDto:
      description: Model representing a student account data
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/UUID'
      allOf:
        - $ref: '#/components/schemas/BasicStudentData'
    BasicStudentData:
      description: Model representing basic reusable student's data
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: john.paul@gmail.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Poul
        birthDate:
          type: string
          format: date
          example: 21-08-1993
    SaveStudentRequest:
      description: Model representing data of student to be saved
      type: object
      required:
        - password
      properties:
        password:
          type: string
          format: password
          example: password123
      allOf:
        - $ref: '#/components/schemas/BasicStudentData'
    ErrorResponse:
      description: Model representing response in case of any exception thrown in application
      type: object
      properties:
        code:
          type: string
          example: STUDENT_NOT_FOUND
        message:
          type: string
          example: Student not found.